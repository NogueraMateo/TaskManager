Clausulas importantes de MySQL

SELECT, devuelve una tabla nueva con los campos especificados

WHERE, es una condición que se le aplica a uno o más valores que puedan tomar los campos, se usa en 
conjunto con otras clausulas como SELECT o DELETE

DELETE, sirve para eliminar ciertas filas de determinados campos de acuerdo a las condiciones especificadas

AS, sirve para cambiar temporalmente el nombre de un campo

ORDER BY, sirve para odernar ciertas consultas que hagamos por el campo especificado. Las condiciones que vayan en la 
consulta deben ir antes del ORDER BY

ASC, representa ascendente que es el valor por defecto de la clausula ORDER BY, sin embargo, si se quieren
ordenar en order descendete se usa DESC

AND, OR, operadores lógicos que funcionan como en python. Importante agrupar si se quieren usar los dos operadores en una misma consulta

NOT, nos sirve para negar una consulta, que se haga lo contrario a lo que estamos consultando

LIMIT, esta clausula nos sirve para establecer un límite de filas que queremos que nos devuelva una consulta, se usa la clausula 
LIMIT y seguido escribimos el número del límite	

RANDOM(), esta no es una clausula si no una función, se puede usar en conjunto con la clausula ORDER BY seguido de la función 
RANDOM(), lo que genera que la tabla que nos devuelva una consulta esté ordenada de manera aleatoria

BETWEEN, esta clausula nos permite filtrar ciertas consultas de acuerdo a un rango numerico, sin emabargo, no solamente sirve
para rangos numericos si no tambien para fechas, que deben estar en el formato correcto YYYY/MM/DD. Importante recordar 
que los límites pasados al BETWEEN son inclusivos o están incluidos.

LIKE, funciona muy parecido a como funciona el =, pero tiene 2 comodines, que es algo como una expresion regular que nos permite 
identificar ciertos patrones de texto. El primer comodín es el %, que sirve para indicar que antes o despues de lo que necesitemos
puede ir cualquier caracter. Por ejemplo '%yo', aquí estamos queriendo decir que antes de 'yo', puede ir lo que sea, pero debe terminar 
en 'yo'. En cambio, 'pal%', aqui estamos diciendo que debe comenzar con pal, pero puede terminar en cualquier cosa. Por último, '%tro%',
con esto estamos verificando que 'tro' esté en cualquier lugar de la cadena.
El segundo comodín es el guión bajo, que se usa para representar cuandos caracteres faltan en una palabra, por ejemplo, 'F___o', aqui 
estamos diciendo que la cadena empieza por F, seguido de 3 caracteres y que termina en la O. Todos los valores que sigan ese patrón
seran devueltos.

IS NULL, es una condición que se usa con la cláusula WHERE, la cual nos devolverá los registros que tengan valores nulos en el campo
especificado

IS NOT NULL, es lo contrario a IS NULL, simplemente devuelve los registros que tengan valores nulos en el campo especificado.

IN, este operador lógico opera con valores que le pasemos dentro de una tupla o parentesis separados por comas, por ejemplo, 
SELECT * FROM Products
WHERE LastName IN ('Fuller', 'Diana')
Esta consulta nos va a devolver los registros de la tabla Products en donde el valor del campo LastName sea igual a 'Fuller' o a 'Diana'
Tambien funciona con valores numéricos 

UNION, UNION ALL. Estas clausulas sirven para unir dos tablas, sin embargo, para hacer un uso efectivo de estas clausulas las tablas que 
vamos a unir deben de tener la misma cantidad de columnas con el mismo tipo de datos, si no es así los resultados que nos devuelva la consulta
pueden ser inesperados. La diferencia entre usar UNION solo y UNION ALL, es que al usar UNION en caso de haber datos repetidos los va 
a mostrar, en cambio, al usar el UNION ALL en caso de haber registros repetidos solamente muestra uno 
